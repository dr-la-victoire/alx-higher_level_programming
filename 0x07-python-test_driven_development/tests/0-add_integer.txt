The 0-add_integer module
========================

Using 0-add_integer
------------------

Function
--------

``add_integer(a, b=98)``

This shows how to use the module ``0-add_integer``
It applies various test cases for the function

First you import add from the 0-add_integer module

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 2)
	4

Instances involving floats
--------------------------

::

	>>> add_integer(2.0, 3)
	5

::
	>>> add_integer(20, 8.5)
	28

::
	>>> add_integer(50.5, 23.7)
	73

Instances involving negative numbers
------------------------------------
Since a negative number is still an integer, the function works as expected

::
	>>> add_integer(-2, 7)
	5

::
	>>> add_integer(24, -10)
	14

Instances when one of the arguments are not integers
----------------------------------------------------

If one of the parameters are not integers, a TypeError is raised and the message
'a must be an integer' or 'b must be an integer' is displayed

::
	>>> add_integer('hello', 5)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

::

	>>> add_integer(10, 'goodbye')
	Traceback (most recent call last):
		...
	TypeError: b must be an integer
	

What if the user provides does not provide the required number of arguments?
---------------------------------------------------------------------
If more than the 2 required arguments are provided, a TypeError will be called and the appropraite
message displayed

However, if less than the required arguments are provided, the default will take charge
::

	>>> add_integer(5)
	103
